import numpy as np
import matplotlib.pyplot as plt
from matplotlib.patches import Circle
from matplotlib.animation import FuncAnimation
from IPython.display import display, clear_output

class Weapon:
    def __init__(self, weapon_type, damage, range_, special_ability=None):
        self.weapon_type = weapon_type
        self.damage = damage
        self.range = range_
        self.special_ability = special_ability


    def shoot(self):
        if self.ammo > 0:
            self.ammo -= 1
            return True
        else:
            return False

class Bot:
    def __init__(self, position, health=100, speed=1):
        self.position = position
        self.health = health
        self.speed = speed
        self.weapon = None
        self.stunned = False

    def is_colliding(self, other_position, size):
        other_position = np.array(other_position)
        return np.linalg.norm(self.position - other_position) < size

    def attack(self, target):
        if not self.stunned and self.weapon is not None:
            distance_to_target = np.linalg.norm(self.position - target.position)
            if distance_to_target <= self.weapon.range:
                damage = self.weapon.damage
                if self.weapon.special_ability is not None:
                    self.weapon.special_ability(self, target)
                target.receive_damage(damage)

    def receive_damage(self, damage):
        self.health -= damage

    def shoot(self):
        if self.weapon is not None:
            return self.weapon.shoot()
        else:
            return False


class House:
    def __init__(self, position, size):
        self.position = position
        self.size = size
        self.door_position = np.array(position) + np.array(size) // 2

class Arrow:
    def __init__(self, position, direction, speed, damage):
        self.position = np.array(position, dtype=float)
        self.direction = np.array(direction, dtype=float)
        self.direction /= np.linalg.norm(self.direction)  # Нормализация вектора направления
        self.speed = speed
        self.damage = damage

    def move(self):
        self.position += self.direction * self.speed

class BattleRoyaleEnv:
    DAMAGE_ZONE_RADIUS = 30
    BOT_SIZE = 5
    HOUSE_SIZE = 10
    BARRIER_SIZE = 4
    WEAPON_SIZE = 5
    COLORS = {'red': [255, 0, 0], 'green': [0, 255, 0], 'blue': [0, 0, 255], 'gray': [169, 169, 169], 'black': [0, 0, 0],
              'yellow': [255, 255, 0]}

    def __init__(self, num_bots=3):
        self.num_bots = num_bots
        self.bots = [Bot(position) for position in [[30, 30], [30, 226], [226, 30], [226, 226]]]
        self.rock_positions = np.random.randint(50, 200, size=(10, 2))
        self.houses = [House(position, [self.HOUSE_SIZE, self.HOUSE_SIZE]) for position in np.random.randint(50, 200, size=(5, 2))]
        self.barrier_positions = np.random.randint(50, 200, size=(5, 2))
        self.weapon_positions = np.random.randint(50, 200, size=(5, 2))
        self.damage_zone_center = np.array([128, 128])
        self.damage_zone_radius = self.DAMAGE_ZONE_RADIUS
        self.weapons = {'bow': Weapon('bow', 5, 20, special_ability=self.slow_down),
                        'sword': Weapon('sword', 8, 5, special_ability=self.stun)}
        self.arrows = []
        self.fig, self.ax = plt.subplots()

    def slow_down(self, attacker, target):
        target.speed = 0.5

    def stun(self, attacker, target):
        target.stunned = True

    def reset(self):
        self.bots = [Bot(position) for position in [[30, 30], [30, 226], [226, 30], [226, 226]]]
        self.arrows = []
        return self.get_state()

    def get_state(self):
        state = np.zeros((256, 256, 3), dtype=np.uint8)
        self.draw_objects_type(state, [bot.position for bot in self.bots], 'red', self.BOT_SIZE)
        self.draw_objects_type(state, self.rock_positions, 'gray', self.BOT_SIZE)
        for house in self.houses:
            self.draw_object(house.position, state, 'blue', [self.HOUSE_SIZE, self.HOUSE_SIZE])
        self.draw_objects_type(state, self.barrier_positions, 'black', self.BARRIER_SIZE)
        self.draw_objects_type(state, self.weapon_positions, 'green', self.WEAPON_SIZE)
        self.draw_damage_zone(state)

        # Отрисовка стрел
        for arrow in self.arrows:
            x, y = arrow.position.astype(int)
            state[x, y, :] = self.get_color_value('yellow')

        return state

    def draw_objects_type(self, state, objects, color, size):
        for obj in objects:
            self.draw_object(obj, state, color, size)

  

   
    def draw_object(self, obj, state, color, size):
        x, y = obj
        if isinstance(size, int):
            size_half = [size // 2, size // 2]
        else:
            size_half = [s // 2 for s in size]
        state[x - size_half[0]:x + size_half[0], y - size_half[1]:y + size_half[1], :] = self.get_color_value(color)




    def get_color_value(self, color):
        return self.COLORS.get(color, [0, 0, 0])

    def draw_damage_zone(self, state):
        damage_zone_radius = max(10, self.damage_zone_radius)
        x, y = self.damage_zone_center
        damage_zone = Circle((x, y), damage_zone_radius, fill=False, edgecolor='red', linewidth=2, alpha=0.7)
        self.ax.add_patch(damage_zone)

    def animate_damage_zone(self, frame):
        self.damage_zone_radius -= 0.1
        if self.damage_zone_radius < 10:
            self.damage_zone_radius = 10
        self.ax.clear()
        self.draw_damage_zone(self.get_state())
        self.ax.set_facecolor(self.interpolate_color())

    def interpolate_color(self):
        ratio = (self.damage_zone_radius - 10) / (self.DAMAGE_ZONE_RADIUS - 10)
        start_color = np.array(self.get_color_value('red'))
        end_color = np.array(self.get_color_value('yellow'))
        interpolated_color = start_color + ratio * (end_color - start_color)
        return interpolated_color / 255.0

    def weapon_pickup(self, bot):
        bot_position = bot.position
        for i in range(len(self.weapon_positions)):
            weapon_position = self.weapon_positions[i]
            if np.linalg.norm(bot_position - weapon_position) < self.WEAPON_SIZE:
                weapon_type = np.random.choice(list(self.weapons.keys()))
                return self.weapons[weapon_type]
        return None


    def update_weapon_positions(self, bot_position):
        for i in range(len(self.weapon_positions)):
            weapon_position = self.weapon_positions[i]
            if np.linalg.norm(bot_position - weapon_position) < self.WEAPON_SIZE:
                self.weapon_positions[i] = np.random.randint(50, 200, size=(1, 2))

    def draw_damage_zone(self, state):
        damage_zone_radius = max(10, self.damage_zone_radius)
        x, y = self.damage_zone_center
        damage_zone = Circle((x, y), damage_zone_radius, fill=False, edgecolor='red', linewidth=2, alpha=0.7)
        self.ax.add_patch(damage_zone)

    def add_random_obstacle(self, num_obstacles=1):
        random_obstacles = np.random.randint(50, 200, size=(num_obstacles, 2))
        self.rock_positions = np.vstack([self.rock_positions, random_obstacles])

    def dynamic_damage_zone(self):
        anim = FuncAnimation(self.fig, self.animate_damage_zone, frames=100, repeat=False, interval=100)
        display(self.fig)
        clear_output(wait=True)

    def add_random_weapon(self, num_weapons=1):
        random_weapons = np.random.randint(50, 200, size=(num_weapons, 2))
        self.weapon_positions = np.vstack([self.weapon_positions, random_weapons])

    def randomize_bot_positions(self):
        for bot in self.bots:
            for house in self.houses:
                while np.any(bot.is_colliding(house.position, [self.HOUSE_SIZE, self.HOUSE_SIZE])):
                    bot.position += np.random.randint(-5, 6, size=2)


        # Проверка столкновений между ботами
        for i in range(self.num_bots):
            for j in range(i + 1, self.num_bots):
                while self.bots[i].is_colliding(self.bots[j].position, self.BOT_SIZE):
                    self.bots[i].position += np.random.randint(-5, 6, size=2)
                while self.bots[j].is_colliding(self.bots[i].position, self.BOT_SIZE):
                    self.bots[j].position += np.random.randint(-5, 6, size=2)

        # Проверка столкновений с препятствиями (домами)
        def randomize_bot_positions(self):
            for bot in self.bots:
              for house in self.houses:
                while (bot.is_colliding(house.position, [self.HOUSE_SIZE, self.HOUSE_SIZE])).any():
                    bot.position += np.random.randint(-5, 6, size=2)


    def change_num_bots(self, num_bots):
        self.num_bots = num_bots
        self.bots = [Bot(position) for position in [[30, 30], [30, 226], [226, 30], [226, 226]]]

    def move_arrows(self):
        for arrow in self.arrows:
            arrow.move()

    def handle_collisions(self):
        # Обработка столкновений стрел с домами
        for arrow in self.arrows:
            for house in self.houses:
                if self.is_point_inside_rect(arrow.position, house.position, [self.HOUSE_SIZE, self.HOUSE_SIZE]):
                    self.arrows.remove(arrow)
                    break

        # Обработка столкновений стрел с ботами
        for arrow in self.arrows:
            for bot in self.bots:
                if np.linalg.norm(arrow.position - bot.position) < self.BOT_SIZE:
                    self.arrows.remove(arrow)
                    bot.receive_damage(arrow.damage)

    def is_point_inside_rect(self, point, rect_position, rect_size):
        return (
            rect_position[0] <= point[0] <= rect_position[0] + rect_size[0] and
            rect_position[1] <= point[1] <= rect_position[1] + rect_size[1]
        )

    def render(self):
        state = self.get_state()
        self.ax.clear()
        plt.imshow(state)

        # Отрисовка ботов
        for bot in self.bots:
            self.draw_object(bot.position, state, 'red', self.BOT_SIZE)

        self.draw_objects_type(state, self.rock_positions, 'gray', self.BOT_SIZE)
        for house in self.houses:
            self.draw_object(house.position, state, 'blue', [self.HOUSE_SIZE, self.HOUSE_SIZE])
        self.draw_objects_type(state, self.barrier_positions, 'black', self.BARRIER_SIZE)
        self.draw_objects_type(state, self.weapon_positions, 'green', self.WEAPON_SIZE)

        self.draw_damage_zone(state)

        # Отрисовка стрел
        for arrow in self.arrows:
            x, y = arrow.position.astype(int)
            state[x, y, :] = self.get_color_value('yellow')

        self.ax.set_xlim([0, 256])
        self.ax.set_ylim([0, 256])
        self.ax.set_aspect('equal', 'box')
        self.fig.canvas.draw()
        display(self.fig)
        clear_output(wait=True)


# Пример использования:
# Пример использования:
env = BattleRoyaleEnv(num_bots=4)
try:
    for episode in range(1):
        observation = env.reset()
        env.render()

        env.add_random_obstacle(num_obstacles=3)
        env.dynamic_damage_zone()
        env.add_random_weapon(num_weapons=2)
        env.randomize_bot_positions()
        env.change_num_bots(4)
        env.render()

        # Пример использования логики подбора оружия и стрельбы
        for _ in range(10):
            for bot in env.bots:
                picked_weapon = env.weapon_pickup(bot)
                if picked_weapon is not None:
                    bot.weapon = picked_weapon
                    print(f"Bot at position {bot.position} picked up {picked_weapon.weapon_type} with damage {picked_weapon.damage} and range {picked_weapon.range}")

            # Пример использования стрельбы
            for bot in env.bots:
                if bot.weapon is not None and bot.shoot():
                    print(f"Bot at position {bot.position} shot with {bot.weapon.weapon_type}. Ammo left: {bot.weapon.ammo}")

except KeyboardInterrupt:
    print("Прервано вручную.")
finally:
    pass

